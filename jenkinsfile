pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'github-cred', url: 'https://github.com/Ahmed3019/final-project-digitalocean.git'
            }
        }

        stage('Check Infrastructure') {
            steps {
                script {
                    // Check if the droplet already exists
                    def dropletCheck = sh(script: "doctl compute droplet list --format ID --no-header --region fra1", returnStdout: true).trim()
                    
                    if (dropletCheck) {
                        echo 'Infrastructure already exists. Skipping creation.'
                        env.INFRA_EXISTS = 'true'
                    } else {
                        echo 'Infrastructure does not exist. Proceeding with creation.'
                        env.INFRA_EXISTS = 'false'
                    }
                }
            }
        }

        stage('Build Infrastructure') {
            when {
                expression { env.INFRA_EXISTS == 'false' }
            }
            steps {
                script {
                    // Run Terraform commands
                    dir('terraform') {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Generate Inventory') {
            steps {
                script {
                    // Get the public IP of the droplet
                    def dropletIP = sh(script: "doctl compute droplet list --format PublicIPv4 --no-header --region fra1", returnStdout: true).trim()
                    
                    // Create inventory.ini file
                    writeFile file: 'inventory.ini', text: "[webserver]\n${dropletIP}\n"
                    echo "Inventory file created with IP: ${dropletIP}"
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    // Run Ansible playbook
                    sh 'ansible-playbook -i inventory.ini setup.yaml'
                }
            }
        }
    }

    post {
        always {
            script {
                // Display the droplet IP and SSH command
                def dropletIP = sh(script: "doctl compute droplet list --format PublicIPv4 --no-header --region fra1", returnStdout: true).trim()
                echo "Droplet IP: ${dropletIP}"
                echo "SSH Command: ssh -i ~/.ssh/my-key root@${dropletIP}"
            }
        }
    }
}
