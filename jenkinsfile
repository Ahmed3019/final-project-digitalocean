pipeline {
    agent any

    environment {
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token')
        GITHUB_CREDENTIALS = credentials('github-cred')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo 'Checking out the source code...'
                checkout scm
            }
        }

        stage('Clone Project from GitHub') {
            steps {
                echo 'Cloning the project from GitHub...'
                git branch: 'main', url: 'https://github.com/Ahmed3019/final-project-digitalocean.git'
            }
        }

        stage('List Workspace Files') {
            steps {
                script {
                    echo 'Listing files in the workspace...'
                    sh 'ls -al'
                }
            }
        }

        stage('Check if Infrastructure is Built') {
            steps {
                dir('terraform') {
                    script {
                        echo 'Checking if infrastructure is built...'
                        sh '''
                        terraform init
                        terraform apply -auto-approve -var "digitalocean_token=${DIGITALOCEAN_TOKEN}"
                        '''
                    }
                }
            }
        }

        stage('Generate IP and Update Inventory') {
            steps {
                script {
                    echo 'Generating IP and updating inventory...'
                    def ip = ""
                    for (int i = 0; i < 5; i++) {
                        ip = sh(script: 'terraform output -json | jq -r .droplet_ip.value', returnStdout: true).trim()
                        if (ip != "null" && ip != "") {
                            break
                        }
                        sleep(10)  // Wait for 10 seconds before retrying
                    }
                    if (ip == "null" || ip == "") {
                        error("Droplet IP could not be retrieved. Exiting pipeline.")
                    }

                    echo "Droplet IP: ${ip}"

                    // Delete existing inventory file
                    sh 'rm -f inventory.ini'

                    // Create new inventory file
                    writeFile file: 'inventory.ini', text: "[my_droplet]\n${ip}\n"

                    echo "Updated inventory file with droplet IP."
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    echo 'Running Ansible playbook...'
                    sh 'ansible-playbook -i inventory.ini setup.yaml'
                }
            }
        }

        stage('Display SSH Command') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -json | jq -r .droplet_ip.value', returnStdout: true).trim()
                    echo "SSH Command to connect to the droplet:"
                    echo "ssh -i /home/ahmed/.ssh/id_rsa root@${ip}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
