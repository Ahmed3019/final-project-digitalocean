pipeline {
    agent any

    environment {
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token')  // Use the DigitalOcean token credential
        GITHUB_CREDENTIALS = credentials('github-cred')  // Use GitHub credentials
    }

    stages {
        stage('Clone GitHub Repo') {
            steps {
                git branch: 'main', url: 'https://github.com/Ahmed3019/final-project-digitalocean.git', credentialsId: 'github-cred'
            }
        }

        stage('Run Terraform to Create Droplet') {
            steps {
                dir('terraform') { // Change to the terraform directory
                    script {
                        sh 'terraform init' // Initialize Terraform
                        def planOutput = sh(script: "terraform plan -out=tfplan -var=digitalocean_token=${DIGITALOCEAN_TOKEN} -no-color", returnStdout: true)
                        echo "${planOutput}"
                        // Apply the Terraform plan if there are changes
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Generate Inventory File') {
            steps {
                script {
                    // Get the public IP of the created droplet
                    def ipOutput = sh(script: 'terraform output -raw droplet_ip', returnStdout: true).trim()
                    echo "Droplet IP: ${ipOutput}"

                    // Write the IP to the inventory.ini file
                    writeFile file: 'inventory.ini', text: "[my_droplet]\n${ipOutput}\n"
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                dir('terraform') { // Change to the terraform directory
                    // Run the Ansible playbook
                    sh 'ansible-playbook -i ../inventory.ini setup.yaml'
                }
            }
        }
    }

    post {
        always {
            // Display the SSH command
            script {
                def dropletIP = readFile('inventory.ini').trim().split('\n')[1] // Get the IP from inventory.ini
                echo "Droplet IP: ${dropletIP}"
                echo "SSH Command: ssh root@${dropletIP} -i /path/to/your/private_key" // Update the path to your private key
            }
        }
    }
}
