pipeline {
    agent any

    stages {
        stage('Clone Project from GitHub') {
            steps {
                checkout scm
            }
        }

        stage('List Workspace Files') {
            steps {
                script {
                    sh 'ls -al'
                }
            }
        }

        stage('Check if Infrastructure is Built') {
            steps {
                dir('terraform') {
                    script {
                        def output = sh(script: 'terraform output -json', returnStdout: true).trim()
                        def infrastructureBuilt = sh(script: 'echo $output | jq .infrastructure_built', returnStdout: true).trim()

                        if (infrastructureBuilt == "false") {
                            echo "Infrastructure not built. Proceeding to build..."
                            sh 'terraform init'
                            sh 'terraform apply -auto-approve -var "digitalocean_token=${env.DIGITALOCEAN_TOKEN}"'
                        } else {
                            echo "Infrastructure already built. Skipping creation."
                        }
                    }
                }
            }
        }

        stage('Generate IP and Update Inventory') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -json | jq -r .droplet_ip.value', returnStdout: true).trim()
                    echo "Droplet IP: ${ip}"

                   

                    // Create new inventory file
                    writeFile file: 'inventory.ini', text: "[my_droplet]\n${ip}\n"

                    echo "Updated inventory file with droplet IP."
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    sh 'ansible-playbook -i inventory.ini setup.yaml'
                }
            }
        }

        stage('Display SSH Command') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -json | jq -r .droplet_ip.value', returnStdout: true).trim()
                    echo "SSH Command to connect to the droplet:"
                    echo "ssh -i /home/ahmed/.ssh/id_rsa root@${ip}"
                }
            }
        }
    }

    environment {
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token')
        GITHUB_CREDENTIALS = credentials('github-cred')
    }

    post {
        always {
            cleanWs()
        }
    }
}
