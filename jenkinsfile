pipeline {
    agent any

    environment {
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token')  
        INVENTORY_FILE = 'inventory.ini'  
        ANSIBLE_PLAYBOOK ='setup.yaml'  
        TERRAFORM_WORKDIR = 'terraform'  
    }

    stages {
        stage('Checkout Repository') {
            steps {
                git branch:'main', url: 'https://github.com/Ahmed3019/final-project-digitalocean.git'
            }
        }

        stage('Check Infrastructure') {
            steps {
                dir("${TERRAFORM_WORKDIR}") {
                    sh 'terraform init'
                    step {
                        def infrastructureExists = sh(script: """
                            terraform state list | grep -q "digitalocean_vpc.my_vpc" && 
                            terraform state list | grep -q "digitalocean_droplet.my_instance" && 
                            terraform state list | grep -q "digitalocean_firewall.my_firewall"
                            echo \$infrastructureExists
                        """, returnStdout: true).trim()
                    }
                    step {
                        if (infrastructureExists == "0") {
                            echo 'Entire infrastructure exists. Skipping creation...'
                            infrastructureCreation = false
                            // Extract IPs or any other needed info for existing infrastructure
                            def instanceIp = sh(script: 'terraform output -raw instance_ip', returnStdout: true).trim()
                            env.INSTANCE_IP = instanceIp
                            echo 'Extracted Public IP: ${INSTANCE_IP}'
                        } else {
                            echo 'Not all infrastructure exists. Creating/Updating...'
                            infrastructureCreation = true
                            env.INFRASTRUCTURE_EXISTS = infrastructureCreation
                        }
                    }
                }
            }
        }

        stage('Terraform Apply (If Necessary)') {
            when {
                expression { env.INFRASTRUCTURE_EXISTS == "true" }
            }
            steps {
                dir("${TERRAFORM_WORKDIR}") {
                    sh """
                        terraform apply -auto-approve \
                        -var "digitalocean_token=${DIGITALOCEAN_TOKEN}"
                    """
                    step {
                        if (env.INFRASTRUCTURE_EXISTS == "true") {
                            def instanceIp = sh(script: 'terraform output -raw instance_ip', returnStdout: true).trim()
                            env.INSTANCE_IP = instanceIp
                            echo "New Droplet Public IP: ${INSTANCE_IP}"
                        }
                    }
                }
            }
        }

        stage('Generate/Update Inventory File') {
            steps {
                step {
                    // Create or update the inventory file with the droplet IP
                    writeFile(file: "${INVENTORY_FILE}", text: "[my_droplet]\n${INSTANCE_IP}\nansible_user=ubuntu\nansible_ssh_private_key_file=~/.ssh/your_ssh_key")
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                // Run the Ansible playbook
                sh "ansible-playbook -i ${INVENTORY_FILE} ${ANSIBLE_PLAYBOOK}"
            }
        }
    }

    post {
        always {
            step {
                echo 'Pipeline finished.'
                echo "Inventory file ${INVENTORY_FILE} has been generated/updated and will be kept."
            }
        }
        failure {
            step {
                // Optional: Send notification on failure
            }
        }
    }
}
