pipeline {
    agent any
    environment {
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token')
    }
    stages {
        stage('Clone Project') {
            steps {
                git credentialsId: 'github-cred', url: 'https://github.com/Ahmed3019/final-project-digitalocean.git'
            }
        }
        stage('Check Infrastructure') {
            steps {
                dir('terraform') {
                    script {
                        sh 'terraform init -no-color'
                        sh 'terraform plan -no-color -var digitalocean_token=${DIGITALOCEAN_TOKEN}'
                    }
                }
            }
        }
        stage('Apply Infrastructure if Needed') {
            steps {
                dir('terraform') {
                    script {
                        // Check if the droplet is already created, otherwise apply the changes
                        sh 'terraform apply -auto-approve -no-color -var digitalocean_token=${DIGITALOCEAN_TOKEN}'
                    }
                }
            }
        }
        stage('Capture Droplet IP') {
            steps {
                dir('terraform') {
                    script {
                        // Refresh the state to ensure outputs are available
                        sh 'terraform refresh -no-color'
                        // Capture the IP of the droplet
                        def dropletIp = sh(script: 'terraform output -no-color instance_ip', returnStdout: true).trim()
                        writeFile file: 'inventory.ini', text: "[droplet]\n${dropletIp} ansible_ssh_user=root ansible_ssh_private_key_file=/home/ahmed/.ssh/id_rsa"
                        echo "Droplet IP is: ${dropletIp}"
                    }
                }
            }
        }
        stage('Run Ansible Playbook') {
            steps {
                dir('ansible') {
                    script {
                        // Assuming the playbook is located in the ansible directory
                        sh 'ansible-playbook -i ../terraform/inventory.ini setup.yaml'
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def dropletIp = readFile('terraform/inventory.ini').trim()
                echo "Pipeline completed successfully! Droplet IP: ${dropletIp}"
            }
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
