pipeline {
    agent any 

    environment {
        GITHUB_CREDENTIALS = credentials('github-cred')
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token')
    }

    stages {
        stage('Clone Project from GitHub') {
            steps {
                git url: 'https://github.com/Ahmed3019/final-project-digitalocean.git', credentialsId: 'github-cred'
            }
        }

        stage('Check if Infrastructure is Built') {
            steps {
                dir('terraform') {
                    script {
                        try {
                            def output = sh(script: 'terraform output -json', returnStdout: true).trim()
                            if (output) {
                                echo 'Infrastructure already built.'
                                currentBuild.result = 'UNSTABLE'
                            }
                        } catch (Exception e) {
                            echo 'Infrastructure not built yet, proceeding to build.'
                        }
                    }
                }
            }
        }

        stage('Build Infrastructure') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Generate IP and Update Inventory') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -json | jq -r .droplet_ip.value', returnStdout: true).trim()
                    writeFile file: 'inventory.ini', text: "[digital_ocean]\n${ip}\n"
                    echo "Droplet IP: ${ip}"
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                sh 'ansible-playbook setup.yaml -i inventory.ini'
            }
        }

        stage('Display SSH Command') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -json | jq -r .droplet_ip.value', returnStdout: true).trim()
                    echo "SSH Command: ssh -i /path/to/my-key root@${ip}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
