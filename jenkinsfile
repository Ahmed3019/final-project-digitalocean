pipeline {
    agent any

    environment {
        DO_TOKEN = credentials('digitalocean_token')
        GITHUB_REPO = 'https://github.com/Ahmed3019/final-project-digitalocean'
        PROJECT_PATH = '/home/ahmed/Desktop/final project/final_project_digitalocean/final-project-digitalocean'
        TERRAFORM_PATH = "${PROJECT_PATH}/terraform"
        ANSIBLE_INVENTORY = 'inventory.ini'
        ANSIBLE_PLAYBOOK = 'setup.yaml'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git url: "${GITHUB_REPO}", branch: 'main', credentialsId: 'github-cred'
            }
        }

        stage('Terraform Check & Apply') {
            steps {
                script {
                    // Change to the directory containing infra.tf
                    dir("${TERRAFORM_PATH}") {
                        // Check if the infrastructure exists
                        def infrastructureExists = sh(script: 'terraform show -json | jq -r .resources | length', returnStdout: true).trim()
                        if (infrastructureExists == "0") {
                            echo 'Infrastructure does not exist. Applying Terraform configuration...'
                            // Initialize Terraform
                            sh "export DIGITALOCEAN_TOKEN=${DO_TOKEN} && terraform init"
                            // Apply Terraform configuration
                            sh "export DIGITALOCEAN_TOKEN=${DO_TOKEN} && terraform apply -auto-approve"
                        } else {
                            echo 'Infrastructure already exists. Skipping Terraform apply.'
                        }
                    }
                }
            }
        }

        stage('Create Ansible Inventory') {
            steps {
                script {
                    // Create the inventory file
                    writeFile file: "${ANSIBLE_INVENTORY}", text: """
                    [droplet]
                    ${env.INSTANCE_IP}
                    """
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    ansiblePlaybook colorized: true, credentialsId: 'ansible-cred', disableHostKeyChecking: true, installation: 'ansible', inventory: "${ANSIBLE_INVENTORY}", playbook: "${ANSIBLE_PLAYBOOK}"
                }
            }
        }
    }
}
