pipeline {
    agent any 

    environment {
        // Retrieve the DigitalOcean token from Jenkins credentials
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token') // Ensure 'digitalocean_token' is added to Jenkins credentials
    }

    stages {
        stage('Clone Project from GitHub') {
            steps {
                // Clone the GitHub repository
                git branch: 'main', url: 'https://github.com/Ahmed3019/final-project-digitalocean.git', credentialsId: 'github-cred'
            }
        }
        
        stage('List Workspace Files') {
            steps {
                // List files in the workspace for debugging
                sh 'ls -al'
            }
        }

        stage('Check if Infrastructure is Built') {
            steps {
                dir('terraform') {
                    script {
                        // Check the current infrastructure state
                        def output = sh(script: 'terraform output -json', returnStdout: true).trim()
                        echo "Terraform Output: ${output}"

                        if (output == "{}") {
                            echo "Infrastructure not built. Proceeding to build..."
                            // Initialize Terraform
                            sh 'terraform init'
                            // Apply Terraform configuration with the DigitalOcean token
                            sh "terraform apply -auto-approve -var 'digitalocean_token=${DIGITALOCEAN_TOKEN}'"
                        } else {
                            echo "Infrastructure already built."
                        }
                    }
                }
            }
        }

        stage('Generate IP and Update Inventory') {
            steps {
                dir('terraform') {
                    script {
                        // Get the public IP of the created droplet
                        def ipOutput = sh(script: 'terraform output -json', returnStdout: true).trim()
                        def ipAddress = sh(script: "echo '${ipOutput}' | jq -r '.public_ip.value'", returnStdout: true).trim()

                        // Update the inventory file with the new IP address
                        sh "echo '[digitalocean]' > ../inventory.ini"
                        sh "echo '${ipAddress}' >> ../inventory.ini"
                        echo "Updated inventory.ini with IP: ${ipAddress}"
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                // Run the Ansible playbook using the updated inventory
                sh 'ansible-playbook -i inventory.ini setup.yaml'
            }
        }

        stage('Display SSH Command') {
            steps {
                script {
                    // Display the SSH command to connect to the droplet
                    def ipAddress = sh(script: 'cat inventory.ini | tail -n 1', returnStdout: true).trim()
                    echo "SSH command to connect: ssh root@${ipAddress} -i /path/to/your/private/key"
                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}
