pipeline {
    agent any

    environment {
        DIGITALOCEAN_TOKEN = credentials('digitalocean_token')
        GITHUB_CREDENTIALS = credentials('github-cred')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    echo 'Checking out the source code...'
                    checkout scm
                }
            }
        }
        
        stage('Clone Project from GitHub') {
            steps {
                script {
                    echo 'Cloning the project from GitHub...'
                    // Ensure credentials are used here
                    withCredentials([usernamePassword(credentialsId: 'github-cred', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                        git clone https://github.com/Ahmed3019/final-project-digitalocean.git
                        """
                    }
                }
            }
        }

        stage('List Workspace Files') {
            steps {
                script {
                    echo 'Listing files in the workspace...'
                    sh 'ls -al'
                }
            }
        }

        stage('Check if Infrastructure is Built') {
            steps {
                dir('terraform') {
                    script {
                        echo 'Checking if infrastructure is built...'
                        sh 'terraform init'
                        def result = sh(script: 'terraform apply -auto-approve -var digitalocean_token=${DIGITALOCEAN_TOKEN}', returnStatus: true)
                        if (result != 0) {
                            error "Terraform apply failed. Please check the logs."
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    echo 'Running Ansible playbook...'
                    withCredentials([file(credentialsId: 'my-key', variable: 'SSH_KEY')]) {
                        sh 'ansible-playbook -i inventory.ini setup.yaml'
                    }
                }
            }
        }

        stage('Display IP and SSH Command') {
            steps {
                script {
                    echo "Pipeline completed. Use the following command to SSH into your droplet:"
                    echo "ssh -i ${SSH_KEY} root@<DROPLET_IP>"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
        }
    }
}
